{"version":3,"sources":["services/history.js","components/header/index.js","components/header/header.component.jsx","services/storage.js","pages/admin.jsx","pages/partners.jsx","pages/questions.jsx","routing/routing.jsx","App.js","serviceWorker.js","index.js"],"names":["history","createBrowserHistory","Header","to","KEYS","storage","session","set","key","value","sessionStorage","setItem","get","getItem","remove","removeItem","local","localStorage","clear","Admin","useState","questions","setQuestions","useEffect","_questions","JSON","parse","className","type","onClick","receiver","subject","body","stringify","window","open","map","question","email","description","Partners","DEFAULT_ENTRIES","Questions","entries","setEntries","handleChange","target","name","onChange","push","AppRouter","path","component","exact","from","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fa2e6058.chunk.js","sourcesContent":["import {createBrowserHistory} from 'history'\n\nconst history = createBrowserHistory()\n\nexport default history","import Header from './header.component'\n\nexport default Header\n","import React from \"react\";\nimport {Link} from 'react-router-dom'\n\nconst Header = () => (\n    <ul>\n      <li>\n        <Link to=\"/\">\n          Home\n        </Link>\n      </li>\n      <li>\n        <Link to=\"/admin\">\n          Admin\n        </Link>\n      </li>\n      <li>\n        <Link to=\"/partners\">\n          Partners\n        </Link>\n      </li>\n      <li>\n        <Link to=\"/questions\">\n          Questions\n        </Link>\n      </li>\n    </ul>\n);\n\nexport default Header\n","export const KEYS = {\n  QUESTIONS: 'questions'\n}\n\nconst storage = {\n  session: {\n    set: (key, value) => sessionStorage.setItem(key, value),\n    get: key => sessionStorage.getItem(key),\n    remove: key => sessionStorage.removeItem(key)\n  },\n  local: {\n    set: (key, value) => localStorage.setItem(key, value),\n    get: key => localStorage.getItem(key),\n    remove: key => localStorage.removeItem(key),\n    clear: () => localStorage.clear()\n  }\n}\n\nexport default storage","import React, {useEffect, useState, Fragment} from 'react'\nimport Layout from '../components/layout'\nimport storage, {KEYS} from '../services/storage'\nimport {printJSON} from '../utils/common'\n\nconst Admin = () => {\n  const [questions, setQuestions] = useState(null)\n\n  useEffect(() => {\n    const _questions = storage.local.get(KEYS.QUESTIONS) ?? '[]'\n    setQuestions(JSON.parse(_questions))\n  }, [])\n\n  const handleSend = (receiver, subject = 'questions') => {\n    if (!receiver) return null\n    const body = JSON.stringify(questions, null, 2)\n    window.open(`mailto:${receiver}?subject=${subject}&body=${body}`)\n  }\n\n  const handleClear = () => {\n    storage.local.clear()\n    setQuestions([])\n  }\n\n  return (\n    <div>\n      <div>\n        <button className=\"big\" type=\"button\" onClick={handleSend}>Send</button>\n        <button type=\"button\" onClick={handleClear}>Clear</button>\n      </div>\n      {questions && questions.map(question => {\n        const {email, description} = question\n\n        return (\n          <Fragment>\n            <i>email</i>\n            <div>{email}</div>\n            <i>description</i>\n            <div>{description}</div>\n            <hr/>\n            <br/>\n          </Fragment>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Admin\n","import React from 'react'\n\nconst Partners = () => (\n  <div>\n    partners\n  </div>\n)\n\nexport default Partners\n","import React, { useState } from \"react\";\nimport storage, { KEYS } from \"../services/storage\";\n\nconst DEFAULT_ENTRIES = {};\n\nconst Questions = () => {\n  const [entries, setEntries] = useState(DEFAULT_ENTRIES);\n\n  const handleChange = ({ target: { value, name } }) =>\n    setEntries({ ...entries, [name]: value });\n\n  const save = () => {\n    const { local } = storage;\n\n    const questions = JSON.parse(local.get(KEYS.QUESTIONS) ?? \"[]\");\n    questions.push(entries);\n\n    local.set(KEYS.QUESTIONS, JSON.stringify(questions));\n\n    setEntries(DEFAULT_ENTRIES);\n  };\n\n  return (\n    <div>\n      <div>email</div>\n      <input\n        type=\"text\"\n        name=\"email\"\n        value={entries.email ?? \"\"}\n        onChange={handleChange}\n      />\n\n      <div>description</div>\n      <input\n        type=\"text\"\n        name=\"description\"\n        value={entries.description ?? \"\"}\n        onChange={handleChange}\n      />\n\n      <button type=\"button\" onClick={save}>\n        Save\n      </button>\n    </div>\n  );\n};\n\nexport default Questions;\n","import React from 'react'\nimport {Switch, Route, Redirect} from 'react-router-dom'\nimport Admin from '../pages/admin'\nimport Partners from '../pages/partners'\nimport Questions from '../pages/questions'\n\nconst DEFAULT_ROUTE = \"/questions\"\n\nconst AppRouter = () => (\n  <Switch>\n    <Route path=\"/admin\" component={Admin} exact={true} />\n    <Route path=\"/partners\" component={Partners} exact={true} />\n    <Route path=\"/questions\" component={Questions} exact={true} />\n    <Redirect exact from=\"/\" to={DEFAULT_ROUTE} />\n  </Switch>\n)\n\nexport default AppRouter","import React from 'react';\nimport {Router} from 'react-router-dom'\nimport history from './services/history'\nimport AppRouter from './routing/routing'\nimport Header from './components/header'\nimport './styles/solita.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router history={history}>\n        <Header />\n        <AppRouter />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}